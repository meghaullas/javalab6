import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

public class CoinCombination {

    private static class CoinCombinationTask implements Runnable {
        private final int[] coins;
        private final int sum;
        private final int start;
        private final int end;
        private final AtomicInteger result;

        public CoinCombinationTask(int[] coins, int sum, int start, int end, AtomicInteger result) {
            this.coins = coins;
            this.sum = sum;
            this.start = start;
            this.end = end;
            this.result = result;
        }

        @Override
        public void run() {
            int[] dp = new int[sum + 1];
            dp[0] = 1; // Base case: One way to make sum 0

            for (int i = start; i < end; i++) {
                for (int j = coins[i]; j <= sum; j++) {
                    dp[j] += dp[j - coins[i]];
                }
            }

            // Add the result to the shared AtomicInteger
            result.addAndGet(dp[sum]);
        }
    }

    public static int countWays(int[] coins, int sum) {
        int numThreads = 4; // Number of threads to use
        ExecutorService executor = Executors.newFixedThreadPool(numThreads);
        AtomicInteger result = new AtomicInteger(0);

        int chunkSize = (coins.length + numThreads - 1) / numThreads; // Divide coins into chunks

        for (int i = 0; i < numThreads; i++) {
            int start = i * chunkSize;
            int end = Math.min(start + chunkSize, coins.length);
            if (start < coins.length) {
                executor.submit(new CoinCombinationTask(coins, sum, start, end, result));
            }
        }

        executor.shutdown();
        while (!executor.isTerminated()) {
            // Wait for all threads to finish
        }

        return result.get();
    }

    public static void main(String[] args) {
        int[] coins = {1, 2, 3};
        int sum = 4;
        int result = countWays(coins, sum);
        System.out.println("Number of ways to make sum " + sum + " is: " + result);
    }
}
